
obych=[31.1517 31.1649 31.1711 31.1516 31.1498 
31.1649 31.1711 31.1516 31.1498 31.1579 
31.1711 31.1516 31.1498 31.1579 31.1783 
31.1516 31.1498 31.1579 31.1783 31.1977 
31.1498 31.1579 31.1783 31.1977 31.1977 
31.1579 31.1783 31.1977 31.1977 31.1963 
31.1783 31.1977 31.1977 31.1963 31.1951 
31.1977 31.1977 31.1963 31.1951 31.1967 
31.1977 31.1963 31.1951 31.1967 31.1951
31.1963 31.1951 31.1967 31.1951 31.2119
31.1951 31.1967 31.1951 31.2119 31.2471
31.1967 31.1951 31.2119 31.2471 31.2453
31.1951 31.2119 31.2471 31.2453 31.2468
31.2119 31.2471 31.2453 31.2468 31.2554
31.2471 31.2453 31.2468 31.2554 31.2553
31.2453 31.2468 31.2554 31.2553 31.2553
31.2468 31.2554 31.2553 31.2553 31.2551
31.2554 31.2553 31.2553 31.2551 31.255
31.2553 31.2553 31.2551 31.255 31.275
31.2553 31.2551 31.255 31.275 31.285
31.2551 31.255 31.275 31.285 31.285
31.255 31.275 31.285 31.285 31.3043
31.275 31.285 31.285 31.3043 31.3071
31.285 31.285 31.3043 31.3071 31.3071
31.285 31.3043 31.3071 31.3071 31.3058
31.3043 31.3071 31.3071 31.3058 31.3136
31.3071 31.3071 31.3058 31.3136 31.3272
31.3071 31.3058 31.3136 31.3272 31.3521
31.3058 31.3136 31.3272 31.3521 31.3924
31.3136 31.3272 31.3521 31.3924 31.397
31.3272 31.3521 31.3924 31.397 31.4046
31.3521 31.3924 31.397 31.4046 31.3928
31.3924 31.397 31.4046 31.3928 31.3928
31.397 31.4046 31.3928 31.3928 31.3958
31.4046 31.3928 31.3928 31.3958 31.3965
31.3928 31.3928 31.3958 31.3965 31.3903
31.3928 31.3958 31.3965 31.3903 31.4115
31.3958 31.3965 31.3903 31.4115 31.4337
31.3965 31.3903 31.4115 31.4337 31.437
31.3903 31.4115 31.4337 31.437 31.4531
31.4115 31.4337 31.437 31.4531 31.4725
31.4337 31.437 31.4531 31.4725 31.4758
31.437 31.4531 31.4725 31.4758 31.4608
31.4531 31.4725 31.4758 31.4608 31.439
31.4725 31.4758 31.4608 31.439 31.4471
31.4758 31.4608 31.439 31.4471 31.5002
31.4608 31.439 31.4471 31.5002 31.5124
31.439 31.4471 31.5002 31.5124 31.5128
31.4471 31.5002 31.5124 31.5128 31.5128
31.5002 31.5124 31.5128 31.5128 31.5156
31.5124 31.5128 31.5128 31.5156 31.53
31.5128 31.5128 31.5156 31.53 31.5533
31.5128 31.5156 31.53 31.5533 31.5476
31.5156 31.53 31.5533 31.5476 31.5437
31.53 31.5533 31.5476 31.5437 31.5555
31.5533 31.5476 31.5437 31.5555 31.4948
31.5476 31.5437 31.5555 31.4948 31.4779
31.5437 31.5555 31.4948 31.4779 31.5395
31.5555 31.4948 31.4779 31.5395 31.5394
31.4948 31.4779 31.5395 31.5394 31.5332
31.4779 31.5395 31.5394 31.5332 31.5056
31.5395 31.5394 31.5332 31.5056 31.5015
31.5394 31.5332 31.5056 31.5015 31.5035
31.5332 31.5056 31.5015 31.5035 31.5333
31.5056 31.5015 31.5035 31.5333 31.5069
31.5015 31.5035 31.5333 31.5069 31.4701
31.5035 31.5333 31.5069 31.4701 31.4401
31.5333 31.5069 31.4701 31.4401 31.4568
31.5069 31.4701 31.4401 31.4568 31.5238
31.4701 31.4401 31.4568 31.5238 31.5502
31.4401 31.4568 31.5238 31.5502 31.5409
31.4568 31.5238 31.5502 31.5409 31.5324
31.5238 31.5502 31.5409 31.5324 31.5542
31.5502 31.5409 31.5324 31.5542 31.5581
31.5409 31.5324 31.5542 31.5581 31.5828
31.5324 31.5542 31.5581 31.5828 31.5612
31.5542 31.5581 31.5828 31.5612 31.5321
31.5581 31.5828 31.5612 31.5321 31.5405
31.5828 31.5612 31.5321 31.5405 31.5608
31.5612 31.5321 31.5405 31.5608 31.5668
31.5321 31.5405 31.5608 31.5668 31.555
31.5405 31.5608 31.5668 31.555 31.565
31.5608 31.5668 31.555 31.565 31.5735
31.5668 31.555 31.565 31.5735 31.5711
31.555 31.565 31.5735 31.5711 31.5725
31.565 31.5735 31.5711 31.5725 31.5803
31.5735 31.5711 31.5725 31.5803 31.5542
31.5711 31.5725 31.5803 31.5542 31.5752
31.5725 31.5803 31.5542 31.5752 31.5744
31.5803 31.5542 31.5752 31.5744 31.5673];

% Выделение входных и выходных данных
input = obych(:, 1:4);    % Входные данные
output = obych(:, 5);     % Выходные данные для обучения

% Создание и обучение нейронной сети
predict = newff(minmax(input'), [25 1], {'logsig' 'purelin'});
predict = train(predict, input', output');

test = [31.1517 31.1649 31.1711 31.1516 31.1498 
31.1649 31.1711 31.1516 31.1498 31.1579 
31.1711 31.1516 31.1498 31.1579 31.1783 
31.1516 31.1498 31.1579 31.1783 31.1977 ];

% Выделение входных и выходных данных для теста
test_input = test(:, 1:4);
test_output = test(:, 5);

% Получение прогнозов нейронной сети для тестовых данных
result = sim(predict, test_input);

% Вычисление ошибки для нейронной сети
target = test_output;
output = result;
s1 = 0;
s2 = 0;
for i = 1:4
    s1 = s1 + ((target(i) - output(i))^2);
    s2 = s2 + (target(i)^2);
end
s1 = s1^(1/2);
d = s1 / (s2^(1/2));
answer1 = d;

% Загрузка нечеткой системы вывода (FIS) из файла
Dollar = readfis('Dollar.fis');

% Применение FIS к различным данным
out1 = evalfis([31.1517 31.1649 31.1711 31.1516], Dollar);
out2 = evalfis([31.1649 31.1711 31.1516 31.1498], Dollar);
out3 = evalfis([31.1711 31.1516 31.1498 31.1579], Dollar);
out4 = evalfis([31.1516 31.1498 31.1579 31.1783], Dollar);
output2 = [out1 out2 out3 out4];

% Вычисление ошибки для нечеткой системы вывода
s1 = 0;
s2 = 0;
for i = 1:4
    s1 = s1 + ((target(i) - output2(i))^2);
    s2 = s2 + (target(i)^2);
end
s1 = s1^(1/2);
d = s1 / (s2^(1/2));
answer2 = d;

if answer1 > answer2
    disp('Ошибка меньше у нечеткой системы вывода');
    disp(answer2)
else
    disp('Ошибка меньше у нейронной сети с обратным распространением ошибки=');
    disp(answer1)
end